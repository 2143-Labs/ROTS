name: Game

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        rust: [nightly]
    steps:
    - uses: actions/checkout@v3

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: Install alsa
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install libasound2-dev libudev-dev

    - run: cargo test --release --no-default-features
    - run: cargo build --release --no-default-features

    - name: Upload Executable
      uses: actions/upload-artifact@v3
      with:
        name: rots-${{ matrix.os }}
        path: |
          target/release/ROTS
          target/release/ROTS.exe
        retention-days: 2

  upload_assets_as_artifact:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Upload Assets
      uses: actions/upload-artifact@v3
      with:
        name: assets
        path: |
          assets
          !assets/**/*.aseprite
        retention-days: 2

  create_release:
    runs-on: ubuntu-latest
    needs: [ build, upload_assets_as_artifact ]
    permissions:
      contents: write
    #outputs:
      #release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      #release_tag_name: ${{ steps.create_release.outputs.tag_name }}
      #release_id: ${{ steps.create_release.outputs.id }}
      #release_node_id: ${{ steps.create_release.outputs.node_id }}
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: ${{ github.event_name == 'pull_request' }}
        prerelease: ${{ github.event_name == 'pull_request' }}

    - name: Create Zip
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: 'zip'
        filename: 'release.zip'

    - name: Attach Executable to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.release_upload_url }}
        asset_path: release.zip
        asset_name: release.zip
        asset_content_type: application/octet-stream
