name: Game

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  setup:
    outputs:
      status: ${{ steps.check.outputs.status }}
      builds: ${{ steps.check.outputs.builds }}
    runs-on: ubuntu-latest
    steps:
      - name: Check labels to determine build steps
        id: check
        run: |
          # TODO fix this
          IS_WIP="${{ contains(github.event.pull_request.labels.*.name, 'WIP') }}"
          BUILD_WINDOWS="${{ contains(github.event.pull_request.labels.*.name, 'ready') || github.event_name == 'push' }}"
          true
          if [ "$IS_WIP" = "true" ]; then
            echo 'status=wip' >> $GITHUB_OUTPUT
          else
            echo 'status=ok' >> $GITHUB_OUTPUT
          fi

          if [ "$BUILD_WINDOWS" == "true" ]; then
            echo 'builds=["windows-latest", "ubuntu-latest"]' >> $GITHUB_OUTPUT
          else
            echo 'builds=["ubuntu-latest"]' >> $GITHUB_OUTPUT
          fi

  build:
    needs: [ setup ]
    if: needs.setup.outputs.status == 'ok'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      CARGO_UNSTABLE_SPARSE_REGISTRY: "true"
    strategy:
      matrix:
        os: ${{ fromJSON(needs.setup.outputs.builds) }}
        rust: [nightly]
    steps:
    - uses: actions/checkout@v3

    - name: Run sccache-cache
      if: ${{ !github.event.act }}
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: Install alsa
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install libasound2-dev libudev-dev

    - run: cargo test --release --no-default-features
    - run: cargo build --release --no-default-features

    - name: Upload Executable
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}
        path: |
          target/release/client
          target/release/server
          target/release/client.exe
          target/release/server.exe
        retention-days: 2

  upload_assets_as_artifact:
    needs: [ setup ]
    if: needs.setup.outputs.status == 'ok'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Upload Assets
      uses: actions/upload-artifact@v3
      with:
        name: assets
        path: |
          client/assets
          !client/assets/**/*.aseprite
        retention-days: 2

  create_release:
    runs-on: ubuntu-latest
    needs: [ setup, build, upload_assets_as_artifact ]
    permissions:
      contents: write
    #outputs:
      #release_upload_url: ${{ steps.create_release.outputs.upload_url }}
      #release_tag_name: ${{ steps.create_release.outputs.tag_name }}
      #release_id: ${{ steps.create_release.outputs.id }}
      #release_node_id: ${{ steps.create_release.outputs.node_id }}
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Move artifacts
        #mv windows-latest/* .
        #rm windows-latest
      run: |
        bash -c "mv windows-latest/* . || true"
        bash -c "rm -rf windows-latest || true"
        bash -c "mv ubuntu-latest/* . || true"
        bash -c "rm -rf ubuntu-latest || true"
        bash -c "chmod +x client server || true"

    - name: Create Zip
      uses: thedoctor0/zip-release@0.7.1
      with:
        type: 'zip'
        filename: 'release.zip'

    - name: Create Draft
      if: github.event_name == 'pull_request'
      id: create_release_draft
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ github.run_number }}
        name: "PR: ${{github.event.pull_request.title}} (v ${{github.run_number}} )"
        draft: ${{ ! contains(github.event.pull_request.labels.*.name, 'ready') }}
        prerelease: true
        files: |
          release.zip

    - name: Create Release
      if: github.event_name == 'push'
      id: create_release_real
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: v${{ github.run_number }}
        name: "Release ${{github.run_number}}"
        draft: false
        prerelease: false
        files: |
          release.zip

    - name: Generate Webhook URL
      id: webhook_url
      run: |
        echo "dXJsPWh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzExOTE4MzkxMDA4ODIzOTEyMzMvTm1zdU11ZXpmc08yRzIzOUVqRlBQbHgwalRIRDA3V1BmRDByTXdWbjEyWHB1aGZ4M3lWVmxxcTltUV9GcnpIeDFJUDg=" | base64 --decode >> $GITHUB_ENV # TODO Change this when orbsa gives me secrets access

    - name: Github Releases To Discord
      uses: tsickert/discord-webhook@v5.4.0
      with:
        content: "A new release has appeared: Run ${{github.run_number}} built for ${{ needs.setup.outputs.builds }}\n URL: ${{ steps.create_release_real && steps.create_release_real.outputs.url || steps.create_release_draft.outputs.url }}"
        username: ROTS Release Bot
        webhook-url: ${{ env.url }}
